[{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting Started with BasicStatsHelper","text":"BasicStatsHelper package provides simple, easy--use functions common statistical analyses. vignette demonstrates main functions practical examples.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"generating-synthetic-data","dir":"Articles","previous_headings":"Introduction","what":"Generating Synthetic Data","title":"Getting Started with BasicStatsHelper","text":"Let’s start generating synthetic data work :","code":"# Generate normal data normal_data <- generate_synthetic_data(n = 200, type = \"normal\", seed = 123) cat(\"Generated\", length(normal_data$data), \"observations from a\", normal_data$distribution, \"distribution\\n\") #> Generated 200 observations from a Normal distribution cat(\"True mean:\", normal_data$true_mean, \", True SD:\", round(normal_data$true_sd, 2), \"\\n\") #> True mean: 50 , True SD: 10  # Generate skewed data for comparison skewed_data <- generate_synthetic_data(n = 200, type = \"skewed\", seed = 456) cat(\"\\nGenerated\", length(skewed_data$data), \"observations from a\", skewed_data$distribution, \"distribution\\n\") #>  #> Generated 200 observations from a Right-skewed (Gamma) distribution"},{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"descriptive-statistics","dir":"Articles","previous_headings":"Introduction","what":"Descriptive Statistics","title":"Getting Started with BasicStatsHelper","text":"Calculate comprehensive descriptive statistics:","code":"# Analyze normal data normal_stats <- descriptive_stats(normal_data$data) print(normal_stats) #> $mean #> [1] 49.9143 #>  #> $median #> [1] 49.41263 #>  #> $sd #> [1] 9.431599 #>  #> $var #> [1] 88.95506 #>  #> $min #> [1] 26.90831 #>  #> $max #> [1] 82.4104 #>  #> $q25 #>      25%  #> 43.74244  #>  #> $q75 #>      75%  #> 55.68396  #>  #> $n #> [1] 200 #>  #> $missing #> [1] 0 #>  #> attr(,\"class\") #> [1] \"descriptive_stats\"  # Analyze skewed data skewed_stats <- descriptive_stats(skewed_data$data) cat(\"\\nSkewed data statistics:\\n\") #>  #> Skewed data statistics: cat(\"Mean:\", round(skewed_stats$mean, 2), \"\\n\") #> Mean: 21.2 cat(\"Median:\", round(skewed_stats$median, 2), \"\\n\") #> Median: 18.97 cat(\"Standard deviation:\", round(skewed_stats$sd, 2), \"\\n\") #> Standard deviation: 15.1"},{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"confidence-intervals","dir":"Articles","previous_headings":"Introduction","what":"Confidence Intervals","title":"Getting Started with BasicStatsHelper","text":"Calculate confidence intervals population mean:","code":"# 95% confidence interval for normal data ci_normal <- confidence_interval(normal_data$data, conf.level = 0.95) cat(\"95% Confidence Interval for Normal Data:\\n\") #> 95% Confidence Interval for Normal Data: cat(\"Sample mean:\", round(ci_normal$mean, 2), \"\\n\") #> Sample mean: 49.91 cat(\"CI: [\", round(ci_normal$lower, 2), \",\", round(ci_normal$upper, 2), \"]\\n\") #> CI: [ 48.6 , 51.23 ] cat(\"Margin of error:\", round(ci_normal$margin_error, 2), \"\\n\") #> Margin of error: 1.32  # Compare with different confidence levels ci_99 <- confidence_interval(normal_data$data, conf.level = 0.99) cat(\"\\n99% Confidence Interval:\\n\") #>  #> 99% Confidence Interval: cat(\"CI: [\", round(ci_99$lower, 2), \",\", round(ci_99$upper, 2), \"]\\n\") #> CI: [ 48.18 , 51.65 ] cat(\"Wider interval due to higher confidence level\\n\") #> Wider interval due to higher confidence level"},{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"hypothesis-testing","dir":"Articles","previous_headings":"Introduction","what":"Hypothesis Testing","title":"Getting Started with BasicStatsHelper","text":"Perform t-tests clear interpretations:","code":"# One-sample t-test: Is the mean significantly different from 50? ttest_one <- simple_ttest(normal_data$data, mu = 50) cat(\"One-sample t-test results:\\n\") #> One-sample t-test results: cat(ttest_one$interpretation) #> Based on the One-sample t-test with 200 observations:  #> - Sample mean: 49.914  #> - T-statistic: -0.129  #> - P-value: 0.8979  #> - Result is not statistically significant at 95 % confidence level  #> - Conclusion: We fail to reject the null hypothesis that the mean equals 50  # Two-sample t-test: Compare normal vs skewed data ttest_two <- simple_ttest(normal_data$data, skewed_data$data) cat(\"\\n\\nTwo-sample t-test results:\\n\") #>  #>  #> Two-sample t-test results: cat(ttest_two$interpretation) #> Based on the Two-sample t-test comparing 200 vs 200 observations:  #> - Group 1 mean: 49.914  #> - Group 2 mean: 21.204  #> - Mean difference: 28.711  #> - T-statistic: 22.804  #> - P-value: 0  #> - Result is statistically significant at 95 % confidence level  #> - Conclusion: We reject the null hypothesis of equal means"},{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"data-visualization","dir":"Articles","previous_headings":"Introduction","what":"Data Visualization","title":"Getting Started with BasicStatsHelper","text":"Create publication-ready plots:","code":"# Basic histogram p1 <- plot_histogram(normal_data$data,                      title = \"Normal Distribution Sample\",                     xlab = \"Value\",                     bins = 25) #> Warning in ggplot2::annotate(\"text\", x = Inf, y = Inf, label = stats_text, : #> Ignoring unknown parameters: `bbox` print(p1) # Histogram with normal overlay and statistics p2 <- plot_histogram(skewed_data$data,                     title = \"Skewed Distribution with Statistics\",                     add_normal = TRUE,                     add_stats = TRUE,                     color = \"lightcoral\",                     bins = 30) #> Warning in ggplot2::annotate(\"text\", x = Inf, y = Inf, label = stats_text, : #> Ignoring unknown parameters: `bbox` print(p2)"},{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"complete-analysis-workflow","dir":"Articles","previous_headings":"Introduction","what":"Complete Analysis Workflow","title":"Getting Started with BasicStatsHelper","text":"’s complete example analyzing dataset:","code":"# Generate a new dataset test_data <- generate_synthetic_data(n = 150, type = \"bimodal\", seed = 789)  # Step 1: Descriptive statistics desc_stats <- descriptive_stats(test_data$data) cat(\"Dataset Summary:\\n\") #> Dataset Summary: cat(\"- Sample size:\", desc_stats$n, \"\\n\") #> - Sample size: 150 cat(\"- Mean:\", round(desc_stats$mean, 2), \"\\n\") #> - Mean: 49.82 cat(\"- Median:\", round(desc_stats$median, 2), \"\\n\") #> - Median: 48.43 cat(\"- Standard deviation:\", round(desc_stats$sd, 2), \"\\n\") #> - Standard deviation: 11.22  # Step 2: Confidence interval ci <- confidence_interval(test_data$data) cat(\"\\n95% Confidence Interval: [\", round(ci$lower, 2), \",\", round(ci$upper, 2), \"]\\n\") #>  #> 95% Confidence Interval: [ 48.01 , 51.63 ]  # Step 3: Hypothesis test ttest <- simple_ttest(test_data$data, mu = 45) cat(\"\\nHypothesis test (H0: μ = 45):\\n\") #>  #> Hypothesis test (H0: μ = 45): cat(\"P-value:\", round(ttest$p.value, 4), \"\\n\") #> P-value: 0 cat(\"Significant?\", ttest$significant, \"\\n\") #> Significant? TRUE  # Step 4: Visualization plot_histogram(test_data$data,               title = \"Bimodal Distribution Analysis\",               add_stats = TRUE,               color = \"lightgreen\") #> Warning in ggplot2::annotate(\"text\", x = Inf, y = Inf, label = stats_text, : #> Ignoring unknown parameters: `bbox`"},{"path":"https://turbodu222.github.io/BasicStatsHelper/articles/BasicStatsHelper.html","id":"conclusion","dir":"Articles","previous_headings":"Introduction","what":"Conclusion","title":"Getting Started with BasicStatsHelper","text":"BasicStatsHelper package provides streamlined workflow common statistical analyses: generate_synthetic_data() - Create test datasets descriptive_stats() - Calculate comprehensive summary statistics confidence_interval() - Estimate population parameters simple_ttest() - Perform hypothesis testing clear interpretations plot_histogram() - Create publication-ready visualizations functions designed intuitive beginners providing statistical rigor needed research applications.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Turbo Du. Author, maintainer.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Du T (2025). BasicStatsHelper: Simple Statistical Analysis Helper Functions. R package version 0.1.0, https://turbodu222.github.io/BasicStatsHelper/, https://github.com/turbodu222/BasicStatsHelper.","code":"@Manual{,   title = {BasicStatsHelper: Simple Statistical Analysis Helper Functions},   author = {Turbo Du},   year = {2025},   note = {R package version 0.1.0,     https://turbodu222.github.io/BasicStatsHelper/},   url = {https://github.com/turbodu222/BasicStatsHelper}, }"},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"basicstatshelper","dir":"","previous_headings":"","what":"Simple Statistical Analysis Helper Functions","title":"Simple Statistical Analysis Helper Functions","text":"BasicStatsHelper provides easy--use functions common statistical analyses including descriptive statistics, confidence intervals, hypothesis testing, data visualization helpers. Designed students researchers need quick reliable statistical computations clear interpretations.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"purpose","dir":"","previous_headings":"","what":"Purpose","title":"Simple Statistical Analysis Helper Functions","text":"final project package UW BIOST 561 (Spring 2025), tutored Kevin Lin.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Simple Statistical Analysis Helper Functions","text":"can install development version BasicStatsHelper GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"turbodu222/BasicStatsHelper\")"},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"Simple Statistical Analysis Helper Functions","text":"","code":"library(BasicStatsHelper)  # Generate synthetic data for testing data <- generate_synthetic_data(n = 100, type = \"normal\", seed = 123)  # Calculate descriptive statistics stats <- descriptive_stats(data$data) print(stats)  # Calculate confidence interval ci <- confidence_interval(data$data) cat(\"95% CI: [\", round(ci$lower, 2), \",\", round(ci$upper, 2), \"]\\n\")  # Perform t-test ttest <- simple_ttest(data$data, mu = 50) cat(ttest$interpretation)  # Create publication-ready histogram plot_histogram(data$data, title = \"Sample Distribution\", add_stats = TRUE)"},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"main-functions","dir":"","previous_headings":"","what":"Main Functions","title":"Simple Statistical Analysis Helper Functions","text":"descriptive_stats(): Calculate comprehensive descriptive statistics including mean, median, standard deviation, quartiles, numeric vector. confidence_interval(): Compute confidence intervals population means using appropriate t-distribution normal distribution methods. simple_ttest(): Perform one-sample two-sample t-tests clear, easy--understand interpretations plain English. plot_histogram(): Create publication-ready histograms optional normal curve overlays statistical summaries. generate_synthetic_data(): Generate synthetic datasets various distributions (normal, uniform, skewed, bimodal) testing educational purposes.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"features","dir":"","previous_headings":"","what":"Features","title":"Simple Statistical Analysis Helper Functions","text":"✅ Beginner-friendly: Functions designed clear parameter names helpful error messages ✅ Educational focus: Results include plain-English interpretations statistical tests ✅ Publication-ready plots: Clean, professional visualizations suitable reports presentations ✅ Flexible data generation: Multiple distribution types simulation testing ✅ Comprehensive documentation: Detailed help files practical examples every function","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"example-workflow","dir":"","previous_headings":"","what":"Example Workflow","title":"Simple Statistical Analysis Helper Functions","text":"","code":"library(BasicStatsHelper)  # Step 1: Generate or load your data data <- generate_synthetic_data(n = 200, type = \"normal\", seed = 123)  # Step 2: Explore your data stats <- descriptive_stats(data$data) print(stats)  # Step 3: Calculate confidence intervals ci <- confidence_interval(data$data, conf.level = 0.95) cat(\"95% CI:\", round(ci$lower, 2), \"to\", round(ci$upper, 2))  # Step 4: Perform hypothesis testing result <- simple_ttest(data$data, mu = 50) cat(result$interpretation)  # Step 5: Visualize your results plot_histogram(data$data, title = \"My Data Distribution\", add_stats = TRUE)"},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"Simple Statistical Analysis Helper Functions","text":"package depends following packages: ggplot2 stats (base R).","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"session-info","dir":"","previous_headings":"","what":"Session Info","title":"Simple Statistical Analysis Helper Functions","text":"package developed following environment:","code":"R version 4.4.0 (2024-04-24) Platform: x86_64-apple-darwin20 Running under: macOS  Matrix products: default BLAS:   /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRblas.0.dylib  LAPACK: /Library/Frameworks/R.framework/Versions/4.4-x86_64/Resources/lib/libRlapack.dylib  attached base packages: [1] stats     graphics  grDevices utils     datasets  methods   base       other attached packages: [1] ggplot2_3.5.1   devtools_2.4.5   usethis_2.2.2    pkgdown_2.0.7"},{"path":"https://turbodu222.github.io/BasicStatsHelper/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"Simple Statistical Analysis Helper Functions","text":"GitHub Repository: https://github.com/turbodu222/BasicStatsHelper Documentation Website: https://turbodu222.github.io/BasicStatsHelper/ Report Issues: https://github.com/turbodu222/BasicStatsHelper/issues","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/confidence_interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Confidence Interval for Mean — confidence_interval","title":"Calculate Confidence Interval for Mean — confidence_interval","text":"function calculates confidence interval population mean using t-distribution (small samples) normal distribution (large samples).","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/confidence_interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Confidence Interval for Mean — confidence_interval","text":"","code":"confidence_interval(x, conf.level = 0.95, na.rm = TRUE)"},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/confidence_interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Confidence Interval for Mean — confidence_interval","text":"x numeric vector sample data conf.level Confidence level (default = 0.95 95% confidence interval) na.rm Logical. missing values removed? Default TRUE.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/confidence_interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Confidence Interval for Mean — confidence_interval","text":"list containing: mean Sample mean lower Lower bound confidence interval upper Upper bound confidence interval conf.level Confidence level used n Sample size se Standard error mean margin_error Margin error","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/confidence_interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Confidence Interval for Mean — confidence_interval","text":"","code":"# Generate sample data sample_data <- rnorm(50, mean = 100, sd = 15)  # Calculate 95% confidence interval ci_95 <- confidence_interval(sample_data) print(ci_95) #> $mean #> [1] 98.57376 #>  #> $lower #> [1] 94.00048 #>  #> $upper #> [1] 103.147 #>  #> $conf.level #> [1] 0.95 #>  #> $n #> [1] 50 #>  #> $se #> [1] 2.275744 #>  #> $margin_error #> [1] 4.573279 #>  #> attr(,\"class\") #> [1] \"confidence_interval\"  # Calculate 99% confidence interval ci_99 <- confidence_interval(sample_data, conf.level = 0.99) print(ci_99) #> $mean #> [1] 98.57376 #>  #> $lower #> [1] 92.47487 #>  #> $upper #> [1] 104.6726 #>  #> $conf.level #> [1] 0.99 #>  #> $n #> [1] 50 #>  #> $se #> [1] 2.275744 #>  #> $margin_error #> [1] 6.098885 #>  #> attr(,\"class\") #> [1] \"confidence_interval\""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/descriptive_stats.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate Descriptive Statistics — descriptive_stats","title":"Calculate Descriptive Statistics — descriptive_stats","text":"function calculates common descriptive statistics numeric vector, including mean, median, standard deviation, quartiles, .","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/descriptive_stats.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate Descriptive Statistics — descriptive_stats","text":"","code":"descriptive_stats(x, na.rm = TRUE)"},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/descriptive_stats.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate Descriptive Statistics — descriptive_stats","text":"x numeric vector na.rm Logical. missing values removed? Default TRUE.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/descriptive_stats.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate Descriptive Statistics — descriptive_stats","text":"list containing descriptive statistics: mean arithmetic mean median median value sd Standard deviation var Variance min Minimum value max Maximum value q25 First quartile (25th percentile) q75 Third quartile (75th percentile) n Number observations missing Number missing values","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/descriptive_stats.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate Descriptive Statistics — descriptive_stats","text":"","code":"# Generate some sample data data <- rnorm(100, mean = 50, sd = 10)  # Calculate descriptive statistics stats <- descriptive_stats(data) print(stats) #> $mean #> [1] 51.30597 #>  #> $median #> [1] 51.82166 #>  #> $sd #> [1] 9.933397 #>  #> $var #> [1] 98.67238 #>  #> $min #> [1] 23.87666 #>  #> $max #> [1] 76.82557 #>  #> $q25 #>      25%  #> 45.36584  #>  #> $q75 #>     75%  #> 58.5016  #>  #> $n #> [1] 100 #>  #> $missing #> [1] 0 #>  #> attr(,\"class\") #> [1] \"descriptive_stats\""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/generate_synthetic_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Synthetic Dataset for Testing — generate_synthetic_data","title":"Generate Synthetic Dataset for Testing — generate_synthetic_data","text":"function generates synthetic datasets various distributions testing statistical functions creating examples.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/generate_synthetic_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Synthetic Dataset for Testing — generate_synthetic_data","text":"","code":"generate_synthetic_data(n = 100, type = \"normal\", seed = NULL)"},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/generate_synthetic_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Synthetic Dataset for Testing — generate_synthetic_data","text":"n Sample size (default = 100) type Type distribution: \"normal\", \"uniform\", \"skewed\", \"bimodal\" (default = \"normal\") seed Random seed reproducibility (default = NULL)","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/generate_synthetic_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Synthetic Dataset for Testing — generate_synthetic_data","text":"list containing: data generated data vector true_mean True population mean (applicable) true_sd True population standard deviation (applicable) distribution Type distribution generated","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/generate_synthetic_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Synthetic Dataset for Testing — generate_synthetic_data","text":"","code":"# Generate normal data normal_data <- generate_synthetic_data(n = 200, type = \"normal\", seed = 123) hist(normal_data$data)   # Generate skewed data skewed_data <- generate_synthetic_data(n = 200, type = \"skewed\", seed = 123) hist(skewed_data$data)"},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/plot_histogram.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Publication-Ready Histogram — plot_histogram","title":"Create Publication-Ready Histogram — plot_histogram","text":"function creates clean, publication-ready histogram customizable options statistical analysis presentations.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/plot_histogram.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Publication-Ready Histogram — plot_histogram","text":"","code":"plot_histogram(   x,   title = \"Histogram\",   xlab = \"Value\",   ylab = \"Frequency\",   bins = 30,   add_normal = FALSE,   add_stats = TRUE,   color = \"lightblue\" )"},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/plot_histogram.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Publication-Ready Histogram — plot_histogram","text":"x numeric vector plot title Character string plot title (default = \"Histogram\") xlab Character string x-axis label (default = \"Value\") ylab Character string y-axis label (default = \"Frequency\") bins Number bins histogram (default = 30) add_normal Logical. Add normal curve overlay? (default = FALSE) add_stats Logical. Add descriptive statistics text? (default = TRUE) color Fill color bars (default = \"lightblue\")","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/plot_histogram.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Publication-Ready Histogram — plot_histogram","text":"ggplot2 object","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/plot_histogram.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Publication-Ready Histogram — plot_histogram","text":"","code":"# Basic histogram data <- rnorm(500, mean = 100, sd = 15) plot_histogram(data, title = \"Sample Distribution\") #> Warning: Ignoring unknown parameters: `bbox`   # Histogram with normal overlay and statistics plot_histogram(data,                title = \"Distribution with Normal Overlay\",                add_normal = TRUE,                add_stats = TRUE) #> Warning: Ignoring unknown parameters: `bbox`"},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/simple_ttest.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform Simple T-Test with Clear Interpretation — simple_ttest","title":"Perform Simple T-Test with Clear Interpretation — simple_ttest","text":"function performs one-sample two-sample t-test provides easy--understand results interpretation.","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/simple_ttest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform Simple T-Test with Clear Interpretation — simple_ttest","text":"","code":"simple_ttest(   x,   y = NULL,   mu = 0,   alternative = \"two.sided\",   conf.level = 0.95,   paired = FALSE )"},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/simple_ttest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform Simple T-Test with Clear Interpretation — simple_ttest","text":"x numeric vector first group single sample y numeric vector second group (optional, two-sample test) mu hypothesized population mean one-sample test (default = 0) alternative Character string specifying alternative hypothesis. Must one \"two.sided\" (default), \"greater\", \"less\" conf.level Confidence level (default = 0.95) paired Logical indicating whether perform paired t-test (default = FALSE)","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/simple_ttest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform Simple T-Test with Clear Interpretation — simple_ttest","text":"list containing: test_type Type t-test performed statistic T-statistic value p.value P-value test conf.int Confidence interval estimate Sample mean(s) interpretation Plain English interpretation results significant Logical indicating result statistically significant","code":""},{"path":"https://turbodu222.github.io/BasicStatsHelper/reference/simple_ttest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform Simple T-Test with Clear Interpretation — simple_ttest","text":"","code":"# One-sample t-test sample1 <- rnorm(30, mean = 105, sd = 10) result1 <- simple_ttest(sample1, mu = 100) print(result1$interpretation) #> [1] \"Based on the One-sample t-test with 30 observations: \\n- Sample mean: 104.038 \\n- T-statistic: 2.263 \\n- P-value: 0.0313 \\n- Result is statistically significant at 95 % confidence level \\n- Conclusion: We reject the null hypothesis that the mean equals 100\"  # Two-sample t-test group1 <- rnorm(25, mean = 50, sd = 8) group2 <- rnorm(25, mean = 55, sd = 8) result2 <- simple_ttest(group1, group2) print(result2$interpretation) #> [1] \"Based on the Two-sample t-test comparing 25 vs 25 observations: \\n- Group 1 mean: 49.984 \\n- Group 2 mean: 55.56 \\n- Mean difference: -5.577 \\n- T-statistic: -2.366 \\n- P-value: 0.0222 \\n- Result is statistically significant at 95 % confidence level \\n- Conclusion: We reject the null hypothesis of equal means\""}]
